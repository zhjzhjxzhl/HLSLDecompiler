//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto command line v1.2.45 on Mon Nov 29 15:56:29 2021
//
//
// Buffer Definitions: 
//
// cbuffer HPixel_Buffer
// {
//
//   float4 g_TargetUvParam;            // Offset:    0 Size:    16
//
// }
//
// cbuffer CamParam_HPixel_Buffer
// {
//
//   float4 g_CameraParam;              // Offset:    0 Size:    16 [unused]
//   float4 g_CameraVec;                // Offset:   16 Size:    16
//
// }
//
// cbuffer InsatncingParamBuffer
// {
//
//   struct sInstancingExParam
//   {
//       
//       float4 color;                  // Offset:    0
//
//   } g_InstancingExParams[128];       // Offset:    0 Size:  2048
//
// }
//
// cbuffer PSParamBuffer1
// {
//
//   float4 g_lightColor;               // Offset:    0 Size:    16
//   float4 g_lightVec;                 // Offset:   16 Size:    16
//   float4 g_FogParam;                 // Offset:   32 Size:    16
//   float4 g_ScreenTileSize;           // Offset:   48 Size:    16
//   float4 g_SpParam;                  // Offset:   64 Size:    16
//   uint4 g_spotShadowNo;              // Offset:   80 Size:    16
//   float4 g_ScreenTileOffset;         // Offset:   96 Size:    16 [unused]
//   float4 g_FogColor;                 // Offset:  112 Size:    16
//
// }
//
// cbuffer MeshBuffer1
// {
//
//   float4 g_Category;                 // Offset:    0 Size:    16
//   float4 g_UvOffset;                 // Offset:   16 Size:    16
//   float4 g_ShadowParam;              // Offset:   32 Size:    16
//   float4 g_wetLv1;                   // Offset:   48 Size:    16 [unused]
//   float4 g_wetLv2;                   // Offset:   64 Size:    16 [unused]
//   float4 g_UvOffsetDN;               // Offset:   80 Size:    16 [unused]
//
// }
//
// cbuffer ModelBuffer
// {
//
//   float4 g_MeshColor;                // Offset:    0 Size:    16
//
// }
//
// cbuffer SH
// {
//
//   float4 g_R_Coeffs;                 // Offset:    0 Size:    16
//   float4 g_G_Coeffs;                 // Offset:   16 Size:    16
//   float4 g_B_Coeffs;                 // Offset:   32 Size:    16
//   float4 g_CubeBlendRate;            // Offset:   48 Size:    16
//   float4 g_ExCubeParam;              // Offset:   64 Size:    16 [unused]
//   float4x4 g_WorldToUvw;             // Offset:   80 Size:    64 [unused]
//
// }
//
// cbuffer PSParamBuffer1
// {
//
//   float4 g_BaseBoolParam1;           // Offset:    0 Size:    16
//   float4 g_BaseBoolParam2;           // Offset:   16 Size:    16 [unused]
//   float4 g_DetailParam;              // Offset:   32 Size:    16
//   float4 g_EnvBoolParam;             // Offset:   48 Size:    16
//   float4 g_AlbedoColor;              // Offset:   64 Size:    16
//   float4 g_OtherPram;                // Offset:   80 Size:    16
//   float4 g_WetParam1;                // Offset:   96 Size:    16 [unused]
//
// }
//
// Resource bind info for g_PointLightAryBuffer
// {
//
//   struct sPointLight
//   {
//       
//       float4 worldPos;               // Offset:    0
//       float4 viewPos;                // Offset:   16
//       float4 lightCol;               // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for g_PerTileLightIndexBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for g_SpotLightAryBuffer
// {
//
//   struct sSpotLight
//   {
//       
//       float4 worldPos;               // Offset:    0
//       float4 viewPos;                // Offset:   16
//       float4 lightCol;               // Offset:   32
//       float4 worldVec;               // Offset:   48
//       float4 sporParam;              // Offset:   64
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for g_CubePixelBuffer
// {
//
//   struct sCubeParamOutput
//   {
//       
//       float4 useNo;                  // Offset:    0
//       float4 blendRate;              // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_Texture0Sampler                 sampler      NA          NA             s0      1 
// g_Texture1Sampler                 sampler      NA          NA             s1      1 
// g_Texture2Sampler                 sampler      NA          NA             s2      1 
// g_Texture3Sampler                 sampler      NA          NA             s3      1 
// g_Texture4Sampler                 sampler      NA          NA             s4      1 
// g_Texture5Sampler                 sampler      NA          NA             s5      1 
// g_Texture11Sampler                sampler      NA          NA            s11      1 
// g_FogLUTSampler                   sampler      NA          NA            s12      1 
// g_Texture0                        texture  float4          2d             t0      1 
// g_Texture1                        texture  float4          2d             t1      1 
// g_Texture2                        texture  float4          2d             t2      1 
// g_Texture3                        texture  float4          2d             t3      1 
// g_Texture4                        texture  float4          2d             t4      1 
// g_Texture11                       texture  float4          2d            t11      1 
// g_FogLUT                          texture  float4        cube            t12      1 
// g_AO_Texture                      texture  float4          2d            t17      1 
// g_CubeTexArray                    texture  float4   cubearray            t18      1 
// g_BeforeFogLUT                    texture  float4        cube            t19      1 
// g_PointLightAryBuffer             texture  struct         r/o            t20      1 
// g_PerTileLightIndexBuffer         texture  struct         r/o            t21      1 
// g_SpotLightAryBuffer              texture  struct         r/o            t22      1 
// g_CubePixelBuffer                 texture  struct         r/o            t25      1 
// PSParamBuffer1                    cbuffer      NA          NA            cb1      1 
// PSParamBuffer1                    cbuffer      NA          NA            cb2      1 
// MeshBuffer1                       cbuffer      NA          NA            cb3      1 
// ModelBuffer                       cbuffer      NA          NA            cb4      1 
// SH                                cbuffer      NA          NA            cb6      1 
// InsatncingParamBuffer             cbuffer      NA          NA            cb8      1 
// HPixel_Buffer                     cbuffer      NA          NA           cb12      1 
// CamParam_HPixel_Buffer            cbuffer      NA          NA           cb13      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB12[1], immediateIndexed
dcl_constantbuffer CB13[2], immediateIndexed
dcl_constantbuffer CB8[128], dynamicIndexed
dcl_constantbuffer CB2[8], immediateIndexed
dcl_constantbuffer CB3[3], immediateIndexed
dcl_constantbuffer CB4[1], immediateIndexed
dcl_constantbuffer CB6[4], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s11, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texturecube (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texturecubearray (float,float,float,float) t18
dcl_resource_texturecube (float,float,float,float) t19
dcl_resource_structured t20, 48
dcl_resource_structured t21, 4
dcl_resource_structured t22, 80
dcl_resource_structured t25, 32
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 21
mul r0.xyz, v3.yzxy, v4.zxyz
mad r0.xyz, v4.yzxy, v3.zxyz, -r0.xyzx
ftou r0.w, v3.w
mul r1.xyz, cb4[0].xyzx, cb8[r0.w + 0].xyzx
bufinfo_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r0.w, t20.yzwx
bufinfo_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r1.w, t22.yzwx
add r2.xyz, -v2.xyzx, cb13[1].xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r3.x, r2.w
mul r3.yzw, r2.xxyz, r3.xxxx
div r4.xy, v0.xyxx, cb12[0].zwzz
ne r5.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[3].zyxz
if_nz r5.x
  mov r4.zw, v1.zzzw
else 
  mov r4.zw, v1.xxxy
endif 
add r6.xyzw, v1.xyzw, cb3[1].xyxy
sample_indexable(texture2d)(float,float,float,float) r7.xyzw, r6.xyxx, t0.xyzw, s0
add r4.zw, r4.zzzw, cb3[1].xxxy
sample_indexable(texture2d)(float,float,float,float) r8.xyzw, r4.zwzz, t2.zxyw, s2
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r6.zwzz, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r10.xyzw, r4.xyxx, t11.zxyw, s11
ne r4.z, cb1[0].x, l(0.000000)
if_nz r4.z
  sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t3.xyzw, s3
  add r6.xyz, r6.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
else 
  mov r6.xyz, l(0,0,0.500000,0)
endif 
ne r4.z, cb1[2].z, l(0.000000)
if_nz r4.z
  mad r4.zw, v1.zzzw, cb1[2].xxxy, cb3[1].xxxy
  sample_indexable(texture2d)(float,float,float,float) r4.zw, r4.zwzz, t4.zwxy, s4
  mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  mad r6.xy, r4.zwzz, r8.wwww, r6.xyxx
endif 
mul r4.z, r6.x, v4.w
mul r6.xyw, r0.xyxz, -r6.yyyy
mad r6.xyw, r4.zzzz, v4.xyxz, r6.xyxw
mad r6.xyz, r6.zzzz, v3.xyzx, r6.xywx
dp3 r4.z, r6.xyzx, r6.xyzx
rsq r4.z, r4.z
mul r6.xyz, r4.zzzz, r6.xyzx
if_nz r5.y
  mul r8.x, r8.x, r9.y
endif 
ne r5.xyw, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[0].yzyw
if_nz r5.x
  mov r7.xyz, cb1[4].xyzx
endif 
if_nz r5.y
  mov r8.z, cb1[5].x
endif 
if_nz r5.w
  mov r8.y, cb1[5].y
endif 
sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t17.xyzw, s11
add_sat r4.x, r4.x, cb3[2].z
mul r4.xyz, r4.xxxx, r7.xyzx
mul r5.xyw, r1.xyxz, r4.xyxz
add r4.w, -r8.z, l(1.000000)
add r7.x, -r8.y, l(1.000000)
mul r11.xyz, r5.xywx, r7.xxxx
mad r12.xyz, r4.xyzx, r1.xyzx, l(-0.030000, -0.030000, -0.030000, 0.000000)
mad r12.xyz, r8.yyyy, r12.xyzx, l(0.030000, 0.030000, 0.030000, 0.000000)
mul r13.xyz, cb2[0].xyzx, cb3[0].wwww
dp3_sat r7.y, r6.xyzx, cb2[1].xyzx
dp3 r7.z, r6.xyzx, r3.yzwy
mov_sat r8.z, r7.z
mad r14.xyz, r2.xyzx, r3.xxxx, cb2[1].xyzx
dp3 r8.w, r14.xyzx, r14.xyzx
rsq r8.w, r8.w
mul r14.xyz, r8.wwww, r14.xyzx
dp3_sat r8.w, r6.xyzx, r14.xyzx
dp3_sat r9.w, cb2[1].xyzx, r14.xyzx
mul r11.w, r4.w, r4.w
add r12.w, r0.x, v4.x
mad r12.w, r12.w, l(0.000001), r11.w
max r12.w, r12.w, l(0.001000)
mad r1.xyz, r4.xyzx, r1.xyzx, l(-0.080000, -0.080000, -0.080000, 0.000000)
mad r1.xyz, r8.yyyy, r1.xyzx, l(0.080000, 0.080000, 0.080000, 0.000000)
add r4.x, -r7.y, l(1.000000)
mul r4.y, r4.x, r4.x
mul r4.y, r4.y, r4.y
mul r4.x, r4.x, r4.y
add r4.y, -r8.z, l(1.000000)
mul r4.z, r4.y, r4.y
mul r4.z, r4.z, r4.z
mul r4.y, r4.y, r4.z
mul r4.z, r9.w, r9.w
dp2 r4.z, r4.zzzz, r12.wwww
add r4.z, r4.z, l(-0.500000)
mad r4.x, r4.x, r4.z, l(1.000000)
mad r4.z, r4.y, r4.z, l(1.000000)
mul r4.x, r4.z, r4.x
mul r4.z, r12.w, r12.w
mul r8.y, r8.w, r8.w
mad r8.w, r12.w, r12.w, l(-1.000000)
mad r8.y, r8.y, r8.w, l(1.000000)
mul r8.y, r8.y, r8.y
mul r8.y, r8.y, l(3.141593)
div r8.y, r4.z, r8.y
add r9.w, -r9.w, l(1.000000)
mul r13.w, r9.w, r9.w
mul r13.w, r13.w, r13.w
mul r9.w, r9.w, r13.w
add r14.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r15.xyz, r9.wwww, r14.xyzx, r1.xyzx
mad r9.w, r12.w, l(0.500000), l(0.500000)
mul r9.w, r9.w, r9.w
mul r13.w, r9.w, r9.w
mul r14.w, r7.y, r7.y
mad r15.w, r9.w, r9.w, r14.w
mad r14.w, -r13.w, r14.w, r15.w
sqrt r14.w, r14.w
add r14.w, r7.y, r14.w
div r14.w, l(1.000000, 1.000000, 1.000000, 1.000000), r14.w
mul r15.w, r8.z, r8.z
mad r16.x, r9.w, r9.w, r15.w
mad r15.w, -r13.w, r15.w, r16.x
sqrt r15.w, r15.w
add r8.z, r8.z, r15.w
div r8.z, l(1.000000, 1.000000, 1.000000, 1.000000), r8.z
mul r14.w, r8.z, r14.w
mul r4.x, r4.x, l(0.318310)
mul r16.xyz, r5.xywx, r4.xxxx
mul r15.xyz, r15.xyzx, r14.wwww
mul r15.xyz, r8.yyyy, r15.xyzx
mad r15.xyz, r16.xyzx, r7.xxxx, r15.xyzx
mul r15.xyz, r7.yyyy, r15.xyzx
mul r13.xyz, r13.xyzx, r15.xyzx
mul r15.xy, v0.xyxx, cb2[3].zwzz
ftou r15.xy, r15.xyxx
utof r15.xy, r15.xyxx
mad r4.x, r15.y, cb2[3].x, r15.x
iadd r0.w, r0.w, l(2)
utof r0.w, r0.w
mul r0.w, r0.w, r4.x
ftou r0.w, r0.w
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.x, r0.w, l(0), t21.xxxx
mov r15.xyzw, l(0,0,0,0)
mov r7.y, l(0)
mov r8.y, r4.x
loop 
  ieq r14.w, r8.y, l(0x0000ffff)
  breakc_nz r14.w
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r16.xyzw, r8.y, l(28), t20.xyzw
  ge r14.w, r16.x, l(0.000000)
  ne r16.x, r16.x, cb3[0].z
  and r14.w, r14.w, r16.x
  if_nz r14.w
    iadd r7.y, r7.y, l(1)
    iadd r14.w, r0.w, r7.y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t21.xxxx
    mov r8.y, r14.w
    continue 
  endif 
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r17.xyzw, r8.y, l(0), t20.xyzw
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.w, r8.y, l(44), t20.xxxx
  add r17.xyz, r17.xyzx, -v2.xyzx
  dp3 r16.x, r17.xyzx, r17.xyzx
  rsq r18.x, r16.x
  mul r18.yzw, r17.xxyz, r18.xxxx
  sqrt r16.x, r16.x
  add r16.x, -r14.w, r16.x
  add r14.w, -r14.w, r17.w
  div_sat r14.w, r16.x, r14.w
  add r14.w, -r14.w, l(1.000000)
  mul r14.w, r14.w, r14.w
  lt r16.x, r16.y, l(0.000000)
  dp3_sat r17.w, r6.xyzx, r18.yzwy
  mul r19.x, r14.w, r17.w
  mad r19.w, -r19.x, r16.y, r15.w
  mad r17.xyz, r17.xyzx, r18.xxxx, r3.yzwy
  dp3 r18.x, r17.xyzx, r17.xyzx
  rsq r18.x, r18.x
  mul r17.xyz, r17.xyzx, r18.xxxx
  dp3_sat r18.x, r6.xyzx, r17.xyzx
  dp3_sat r17.x, r18.yzwy, r17.xyzx
  add r17.y, -r17.w, l(1.000000)
  mul r17.z, r17.y, r17.y
  mul r17.z, r17.z, r17.z
  mul r17.y, r17.y, r17.z
  mul r17.z, r17.x, r17.x
  dp2 r17.z, r17.zzzz, r12.wwww
  add r17.z, r17.z, l(-0.500000)
  mad r17.y, r17.y, r17.z, l(1.000000)
  mad r17.z, r4.y, r17.z, l(1.000000)
  mul r17.y, r17.z, r17.y
  mul r17.z, r18.x, r18.x
  mad r17.z, r17.z, r8.w, l(1.000000)
  mul r17.z, r17.z, r17.z
  mul r17.yz, r17.yyzy, l(0.000000, 0.318310, 3.141593, 0.000000)
  div r17.z, r4.z, r17.z
  add r17.x, -r17.x, l(1.000000)
  mul r18.x, r17.x, r17.x
  mul r18.x, r18.x, r18.x
  mul r17.x, r17.x, r18.x
  mad r18.xyz, r17.xxxx, r14.xyzx, r1.xyzx
  mul r17.x, r17.w, r17.w
  mad r18.w, r9.w, r9.w, r17.x
  mad r17.x, -r13.w, r17.x, r18.w
  sqrt r17.x, r17.x
  add r17.x, r17.x, r17.w
  div r17.x, l(1.000000, 1.000000, 1.000000, 1.000000), r17.x
  mul r17.x, r8.z, r17.x
  mul r20.xyz, r5.xywx, r17.yyyy
  mul r18.xyz, r18.xyzx, r17.xxxx
  mul r17.xyz, r17.zzzz, r18.xyzx
  mad r17.xyz, r20.xyzx, r7.xxxx, r17.xyzx
  mul r17.xyz, r17.wwww, r17.xyzx
  mul r16.yzw, r16.yyzw, r17.xxyz
  mad r17.xyz, r16.yzwy, r14.wwww, r15.xyzx
  mov r19.xyz, r15.xyzx
  mov r17.w, r15.w
  movc r15.xyzw, r16.xxxx, r19.xyzw, r17.xyzw
  iadd r7.y, r7.y, l(1)
  iadd r14.w, r0.w, r7.y
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.y, r14.w, l(0), t21.xxxx
endloop 
lt r0.w, l(0.000000), cb3[2].x
mov r16.xyz, l(0,0,0,0)
mov r4.x, l(0)
loop 
  uge r7.y, r4.x, r1.w
  breakc_nz r7.y
  ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r17.xyzw, r4.x, l(28), t22.xyzw
  ge r7.y, r17.x, l(0.000000)
  ne r8.y, r17.x, cb3[0].z
  and r7.y, r7.y, r8.y
  if_nz r7.y
    iadd r7.y, r4.x, l(1)
    mov r4.x, r7.y
    continue 
  else 
    mov r7.y, r4.x
  endif 
  ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r18.xyzw, r4.x, l(0), t22.xyzw
  ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r19.xyzw, r4.x, l(44), t22.xyzw
  add r18.xyz, r18.xyzx, -v2.xyzx
  dp3 r8.y, r18.xyzx, r18.xyzx
  rsq r14.w, r8.y
  mul r18.xyz, r14.wwww, r18.xyzx
  dp3 r14.w, r18.xyzx, r19.yzwy
  max r14.w, r14.w, l(0.000000)
  lt r16.w, r18.w, r14.w
  if_nz r16.w
    ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r18.xy, r4.x, l(64), t22.xyxx
    if_nz r0.w
      ieq r20.xyzw, cb2[5].xyzw, r7.yyyy
      if_nz r20.x
        mov r16.w, r10.y
      else 
        mov r16.w, l(1.000000)
      endif 
      if_nz r20.y
        mov r16.w, r10.z
      endif 
      if_nz r20.z
        mov r16.w, r10.x
      endif 
      if_nz r20.w
        mov r16.w, r10.w
      endif 
    else 
      mov r16.w, l(1.000000)
    endif 
    add_sat r14.w, -r18.w, r14.w
    mul_sat r14.w, r19.x, r14.w
    sqrt r8.y, r8.y
    mul_sat r8.y, r18.x, r8.y
    add r8.y, -r8.y, l(1.000000)
    mul_sat r8.y, r18.y, r8.y
    mul r14.w, r14.w, r14.w
    mul r8.y, r8.y, r8.y
    mul r8.y, r8.y, r14.w
    dp3_sat r14.w, r6.xyzx, r19.yzwy
    mad r18.xyz, r2.xyzx, r3.xxxx, r19.yzwy
    dp3 r17.x, r18.xyzx, r18.xyzx
    rsq r17.x, r17.x
    mul r18.xyz, r17.xxxx, r18.xyzx
    dp3_sat r17.x, r6.xyzx, r18.xyzx
    dp3_sat r18.x, r19.yzwy, r18.xyzx
    add r18.y, -r14.w, l(1.000000)
    mul r18.z, r18.y, r18.y
    mul r18.z, r18.z, r18.z
    mul r18.y, r18.y, r18.z
    mul r18.z, r18.x, r18.x
    dp2 r18.z, r18.zzzz, r12.wwww
    add r18.z, r18.z, l(-0.500000)
    mad r18.y, r18.y, r18.z, l(1.000000)
    mad r18.z, r4.y, r18.z, l(1.000000)
    mul r18.y, r18.z, r18.y
    mul r17.x, r17.x, r17.x
    mad r17.x, r17.x, r8.w, l(1.000000)
    mul r17.x, r17.x, r17.x
    mul r17.x, r17.x, l(3.141593)
    div r17.x, r4.z, r17.x
    add r18.x, -r18.x, l(1.000000)
    mul r18.z, r18.x, r18.x
    mul r18.z, r18.z, r18.z
    mul r18.x, r18.x, r18.z
    mad r18.xzw, r18.xxxx, r14.xxyz, r1.xxyz
    mul r19.x, r14.w, r14.w
    mad r19.y, r9.w, r9.w, r19.x
    mad r19.x, -r13.w, r19.x, r19.y
    sqrt r19.x, r19.x
    add r19.x, r14.w, r19.x
    div r19.x, l(1.000000, 1.000000, 1.000000, 1.000000), r19.x
    mul r19.x, r8.z, r19.x
    mul r18.y, r18.y, l(0.318310)
    mul r19.yzw, r5.xxyw, r18.yyyy
    mul r18.xyz, r18.xzwx, r19.xxxx
    mul r18.xyz, r17.xxxx, r18.xyzx
    mad r18.xyz, r19.yzwy, r7.xxxx, r18.xyzx
    mul r18.xyz, r14.wwww, r18.xyzx
    mul r17.xyz, r17.yzwy, r18.xyzx
    mul r17.xyz, r8.yyyy, r17.xyzx
    mad r16.xyz, r17.xyzx, r16.wwww, r16.xyzx
  endif 
  iadd r4.x, r7.y, l(1)
endloop 
if_nz r0.w
  mov r10.x, l(1.000000)
endif 
mul r1.xyz, r10.xxxx, r13.xyzx
if_nz r5.z
  mul r1.xyz, r9.xyzx, r1.xyzx
endif 
add r2.xyz, r15.xyzx, r16.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
ftou r2.xy, v0.xyxx
ftou r0.w, cb12[0].z
imad r0.w, r2.y, r0.w, r2.x
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r9.xw, r0.w, l(0), t25.xxxy
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.xy, r0.w, l(16), t25.xyxx
dp3 r0.w, v4.xyzx, r6.xyzx
mad r4.xyz, -r6.xyzx, r0.wwww, v4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r0.xyzx, r6.xyzx
mad r8.yzw, -r6.xxyz, r0.wwww, r0.xxyz
dp3 r0.x, r0.xyzx, r4.xyzx
mad r0.xyz, -r4.xyzx, r0.xxxx, r8.yzwy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.w, r11.w, r11.w, l(-1.000000)
mad r1.w, r0.w, l(-0.000000), l(1.000000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
sqrt r1.w, r1.w
mad r2.z, -r1.w, r1.w, l(1.000000)
max r2.z, r2.z, l(0.000000)
sqrt r2.z, r2.z
mul r3.x, r2.z, l(-0.000000)
mul r0.xyz, r0.xyzx, r3.xxxx
mad r0.xyz, r2.zzzz, r4.xyzx, r0.xyzx
mad r0.xyz, r1.wwww, r6.xyzx, r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r1.w, r3.yzwy, r0.xyzx
add r2.z, r1.w, r1.w
mad r4.xyz, r0.xyzx, -r2.zzzz, r3.yzwy
mov r10.xyz, -r4.xyzx
max r1.w, r1.w, l(0.000000)
dp3 r0.x, r6.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
lt r0.y, r4.w, l(0.010000)
mul r0.z, r0.x, r0.x
mad r0.z, r0.z, r0.w, l(1.000000)
max r0.z, r0.z, l(0.000000)
div r0.z, r11.w, r0.z
mul r0.z, r0.z, r0.z
mul r0.x, r0.x, r0.z
mul r0.x, r0.x, l(0.318310)
mul r0.z, r1.w, l(4.000000)
div r0.x, r0.x, r0.z
mad r0.z, -r4.y, r4.y, l(1.000000)
sqrt r0.z, r0.z
mul r0.x, r0.z, r0.x
log r0.x, r0.x
mad r0.x, -r0.x, l(0.500000), l(4.500000)
max r0.x, r0.x, l(0.000000)
movc r0.x, r0.y, l(0), r0.x
mov r10.w, r9.x
sample_l_indexable(texturecubearray)(float,float,float,float) r0.yzw, r10.xyzw, t18.wxyz, s5, r0.x
mov r9.xyz, r10.xyzx
sample_l_indexable(texturecubearray)(float,float,float,float) r4.xyz, r9.xyzw, t18.xyzw, s5, r0.x
mul r4.xyz, r2.yyyy, r4.xyzx
add r0.x, r7.z, l(1.000000)
max r0.x, r0.x, l(0.000000)
add r1.w, -r4.w, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, r1.w
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul r7.xyz, r0.xxxx, r12.xyzx
mad r0.xyz, r0.yzwy, r2.xxxx, r4.xyzx
dp3 r0.w, cb6[0].yzwy, cb6[0].yzwy
sqrt r1.w, r0.w
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, cb6[0].yzwy
dp3 r0.w, r6.xyzx, r4.xyzx
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.500000)
mul r2.z, r0.w, r0.w
add r3.x, r1.w, r1.w
add r1.w, r1.w, cb6[0].x
div r1.w, r3.x, r1.w
mul r1.w, r1.w, cb6[0].x
dp2 r0.w, r2.zzzz, r0.wwww
mad r0.w, -r2.z, r2.z, r0.w
mad r0.w, r0.w, l(3.333333), l(-1.000000)
mad r4.x, r1.w, r0.w, cb6[0].x
dp3 r0.w, cb6[1].yzwy, cb6[1].yzwy
sqrt r1.w, r0.w
rsq r0.w, r0.w
mul r8.yzw, r0.wwww, cb6[1].yyzw
dp3 r0.w, r6.xyzx, r8.yzwy
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.500000)
mul r2.z, r0.w, r0.w
add r3.x, r1.w, r1.w
add r1.w, r1.w, cb6[1].x
div r1.w, r3.x, r1.w
mul r1.w, r1.w, cb6[1].x
dp2 r0.w, r2.zzzz, r0.wwww
mad r0.w, -r2.z, r2.z, r0.w
mad r0.w, r0.w, l(3.333333), l(-1.000000)
mad r4.y, r1.w, r0.w, cb6[1].x
dp3 r0.w, cb6[2].yzwy, cb6[2].yzwy
sqrt r1.w, r0.w
rsq r0.w, r0.w
mul r8.yzw, r0.wwww, cb6[2].yyzw
dp3 r0.w, r6.xyzx, r8.yzwy
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.500000)
mul r2.z, r0.w, r0.w
add r3.x, r1.w, r1.w
add r1.w, r1.w, cb6[2].x
div r1.w, r3.x, r1.w
mul r1.w, r1.w, cb6[2].x
dp2 r0.w, r2.zzzz, r0.wwww
mad r0.w, -r2.z, r2.z, r0.w
mad r0.w, r0.w, l(3.333333), l(-1.000000)
mad r4.z, r1.w, r0.w, cb6[2].x
max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyz, r5.xywx, r4.xyzx
mad r1.xyz, r4.xyzx, cb6[3].xxxx, r1.xyzx
mov r6.w, r10.w
sample_l_indexable(texturecubearray)(float,float,float,float) r4.xyz, r6.xyzw, t18.xyzw, s0, l(5.000000)
mul r4.xyz, r2.xxxx, r4.xyzx
mov r9.xyz, r6.xyzx
sample_l_indexable(texturecubearray)(float,float,float,float) r5.xyz, r9.xyzw, t18.xyzw, s0, l(5.000000)
mul r2.xyz, r2.yyyy, r5.xyzx
mul r2.xyz, r2.xyzx, cb6[3].yyyy
mad r2.xyz, r4.xyzx, cb6[3].yyyy, r2.xyzx
mad r1.xyz, r11.xyzx, r2.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, r7.xyzx, r1.xyzx
mov_sat r15.w, r15.w
mad r0.w, -r15.w, cb3[0].x, l(1.000000)
mul_sat r0.w, r0.w, r8.x
mul r0.xyz, r0.wwww, r0.xyzx
sqrt r0.w, r2.w
add r0.w, r0.w, -cb2[2].x
mul_sat r0.w, r0.w, cb2[2].y
log r0.w, r0.w
mul r0.w, r0.w, cb2[2].z
exp r0.w, r0.w
mov r1.xyz, -r3.yzwy
sample_indexable(texturecube)(float,float,float,float) r2.xyzw, r1.xyzx, t12.xyzw, s12
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r1.xyzx, t19.xyzw, s12
add r2.xyzw, -r1.xyzw, r2.xyzw
mad r1.xyzw, cb2[4].wwww, r2.xyzw, r1.xyzw
mul r0.w, r0.w, r1.w
mad r1.xyz, r1.xyzx, cb2[7].xyzx, -r0.xyzx
mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov o0.w, r7.w
ret 
// Approximately 482 instruction slots used
